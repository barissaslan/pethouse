/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id "jacoco"
    id 'org.springframework.boot' version '2.4.7'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.palantir.docker' version '0.26.0'
    id 'com.palantir.docker-run' version '0.26.0'
    id "org.sonarqube" version "3.2.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'com.aslanbaris'
description = 'pethouse'

def javaVersion = JavaVersion.VERSION_11;
java.sourceCompatibility = javaVersion;
java.targetCompatibility = javaVersion;

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt:0.7.0'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'com.mashape.unirest:unirest-java:1.4.9'
    implementation 'org.apache.commons:commons-text:1.9'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java:8.0.23'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2:1.4.200'
    testImplementation 'org.mockito:mockito-inline:3.6.28'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

test {
    useJUnitPlatform()
}

String imageName = "barisaslan/${project.name}"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Pethouse'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
